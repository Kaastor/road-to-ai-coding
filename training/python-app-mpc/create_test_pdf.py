"""Create a real test PDF for demonstration."""

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer


def create_test_pdf():
    """Create a multi-page test PDF with rich content."""
    filename = "test_document.pdf"
    
    # Create PDF with more sophisticated layout
    doc = SimpleDocTemplate(filename, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []
    
    # Title
    story.append(Paragraph("RAG System Test Document", styles['Title']))
    story.append(Spacer(1, 12))
    
    # Introduction
    story.append(Paragraph("Introduction", styles['Heading2']))
    story.append(Paragraph(
        "This is a comprehensive test PDF document designed to evaluate the "
        "text extraction and chunking capabilities of the Goose RAG system. "
        "The document contains multiple pages with varied content to test "
        "the robustness of the PDF processing pipeline.",
        styles['Normal']
    ))
    story.append(Spacer(1, 12))
    
    # Technical content
    story.append(Paragraph("Technical Overview", styles['Heading2']))
    story.append(Paragraph(
        "The Retrieval-Augmented Generation (RAG) architecture combines "
        "the power of large language models with external knowledge retrieval. "
        "This approach enables systems to provide accurate, contextual responses "
        "based on specific document collections rather than relying solely on "
        "pre-trained knowledge.",
        styles['Normal']
    ))
    story.append(Spacer(1, 12))
    
    # Component details
    story.append(Paragraph("System Components", styles['Heading2']))
    story.append(Paragraph(
        "1. <b>PDF Reader MCP Server</b>: Handles document ingestion and text extraction "
        "from various PDF formats, preserving metadata and structure information.",
        styles['Normal']
    ))
    story.append(Paragraph(
        "2. <b>Text Chunking Engine</b>: Implements intelligent document segmentation "
        "with configurable chunk sizes, overlap strategies, and boundary detection "
        "to maintain semantic coherence.",
        styles['Normal']
    ))
    story.append(Paragraph(
        "3. <b>Vector Storage</b>: Utilizes PostgreSQL with pgvector extension "
        "to store high-dimensional embeddings generated by local transformer models "
        "for efficient similarity search operations.",
        styles['Normal']
    ))
    story.append(Paragraph(
        "4. <b>Hybrid Retrieval</b>: Combines dense vector search with sparse "
        "BM25 ranking to achieve optimal relevance scoring across diverse query types.",
        styles['Normal']
    ))
    story.append(Spacer(1, 24))
    
    # Implementation details
    story.append(Paragraph("Implementation Details", styles['Heading2']))
    story.append(Paragraph(
        "The system employs a FastAPI backend with SQLAlchemy ORM for database "
        "operations. Document processing utilizes asyncio for concurrent handling "
        "of multiple ingestion tasks. The embedding model runs entirely locally "
        "using sentence-transformers, ensuring data privacy and eliminating "
        "external API dependencies.",
        styles['Normal']
    ))
    story.append(Spacer(1, 12))
    
    # Performance considerations
    story.append(Paragraph("Performance Considerations", styles['Heading2']))
    story.append(Paragraph(
        "Chunking parameters significantly impact both retrieval quality and "
        "system performance. Smaller chunks (400-600 tokens) provide precise "
        "context matching but may lose broader semantic relationships. Larger "
        "chunks (800-1200 tokens) maintain context but can dilute relevance scores. "
        "The default configuration of 800 tokens with 100-token overlap represents "
        "an optimal balance for general-purpose document retrieval.",
        styles['Normal']
    ))
    story.append(Spacer(1, 12))
    
    # Testing methodology
    story.append(Paragraph("Testing Methodology", styles['Heading2']))
    story.append(Paragraph(
        "Comprehensive testing includes unit tests for individual components, "
        "integration tests for end-to-end workflows, and performance benchmarks "
        "for latency and throughput evaluation. Smoke tests verify basic "
        "functionality across different document types and sizes.",
        styles['Normal']
    ))
    
    # Build the PDF
    doc.build(story)
    print(f"Created comprehensive test PDF: {filename}")


def create_simple_pdf():
    """Create a simple test PDF using basic canvas."""
    filename = "simple_test.pdf"
    
    # Create PDF
    c = canvas.Canvas(filename, pagesize=letter)
    
    # Page 1
    c.drawString(100, 750, "Simple Test Document")
    c.drawString(100, 700, "This is a basic PDF created for testing the RAG system.")
    c.drawString(100, 650, "It demonstrates text extraction from actual PDF files.")
    c.drawString(100, 600, "")
    c.drawString(100, 550, "Key features being tested:")
    c.drawString(120, 500, "• PDF text extraction via PyPDF2")
    c.drawString(120, 450, "• Multi-page document handling")
    c.drawString(120, 400, "• Text chunking and indexing")
    c.drawString(120, 350, "• Deduplication logic")
    c.showPage()
    
    # Page 2
    c.drawString(100, 750, "Page 2: Technical Details")
    c.drawString(100, 700, "The MCP (Model Context Protocol) client provides")
    c.drawString(100, 650, "a standardized interface for PDF processing operations.")
    c.drawString(100, 600, "")
    c.drawString(100, 550, "This architecture enables:")
    c.drawString(120, 500, "• Pluggable document processors")
    c.drawString(120, 450, "• Fallback to local processing")
    c.drawString(120, 400, "• Future extensibility for other formats")
    c.drawString(100, 350, "")
    c.drawString(100, 300, "End of test document.")
    c.showPage()
    
    c.save()
    print(f"Created simple test PDF: {filename}")


if __name__ == "__main__":
    try:
        create_test_pdf()
        create_simple_pdf()
    except Exception as e:
        print(f"Error creating PDF: {e}")
        print("Creating fallback text file...")
        with open("test_document.txt", "w") as f:
            f.write("""Test Document

This is a test document for the RAG system.
It contains some sample text that will be extracted
and chunked for search and retrieval.

Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Sed do eiusmod tempor incididunt ut labore et dolore magna
aliqua. Ut enim ad minim veniam, quis nostrud exercitation
ullamco laboris nisi ut aliquip ex ea commodo consequat.

Page 2

Duis aute irure dolor in reprehenderit in voluptate velit
esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
occaecat cupidatat non proident, sunt in culpa qui officia
deserunt mollit anim id est laborum.

This document demonstrates the PDF ingestion capability
of the Goose RAG system. The text will be chunked and
stored for semantic search.
""")
        print("Created test_document.txt instead")